#!/bin/bash

# Install UCB CollectionSpace.

# Usage: csi [tag]
# If tag is not specified, the latest tag in GitHub is used.

SOURCE_DIR=~/src/cspace-deployment
REPOSITORIES=(services application)
DEPLOYMENT_NAME=`csname`
TOMCAT_DIR=$CATALINA_HOME
OPTIND=1
FORCE=false

while getopts "f?" flag; do
	case $flag in
	f) FORCE=true
	   ;;
	esac
done

shift $((OPTIND - 1))

TAG=$1

if [[ $FORCE == true ]]; then
	CSDOWN="csdown -f"
else
	CSDOWN="csdown"
fi

# Update the source code from git.

mkdir -p $SOURCE_DIR

for repo in ${REPOSITORIES[@]}; do
	if [[ -d $SOURCE_DIR/$repo ]]; then
		echo "Fetching ${repo}..."
		cd $SOURCE_DIR/$repo

		if ! git fetch --tags; then
			echo "ERROR: Failed to fetch $repo"
			exit 1
		fi
	else
		echo "Cloning ${repo}..."
		cd $SOURCE_DIR

		if ! git clone https://github.com/cspace-deployment/${repo}.git; then
			echo "ERROR: Failed to clone $repo"
			exit 1
		fi
	fi
done

# Find the latest tag, if necessary.

if [[ -z $TAG ]]; then
	echo "Determining tag..."
	declare -A latest_tags

	for repo in ${REPOSITORIES[@]}; do
		cd $SOURCE_DIR/$repo

		latest_tag=`git for-each-ref --sort=-taggerdate --format '%(refname:short)' --count=1 refs/tags/${DEPLOYMENT_NAME}_*`
		latest_tags[$latest_tag]=1
	done

	possible_tags=${!latest_tags[@]}
	num_possible_tags=${#possible_tags[@]};

	if (( num_possible_tags == 0 )); then
		echo "ERROR: No tags found"
	elif (( num_possible_tags > 1 )); then
		echo "ERROR: Multiple possible tags found"
	else
		TAG=${possible_tags[0]}
	fi
fi

if [[ -z $TAG ]]; then
	echo "ERROR: Unable to determine a tag to use. Try specifiying a tag as an argument."
	exit 1
fi

echo "Installing from tag $TAG"

# Check out the desired tag.

declare -A commit_changed

INSTALLED_VERSION=`csver`

if [[ -z $INSTALLED_VERSION ]]; then
	echo "CollectionSpace is not installed"
else
	echo "Installed version is $INSTALLED_VERSION"
fi

for repo in ${REPOSITORIES[@]}; do
	echo "Checking out $TAG in $repo"
	cd $SOURCE_DIR/$repo

	if [[ -z $INSTALLED_VERSION ]]; then
		installed_commit=''
	else
		installed_commit=`git rev-list --max-count=1 $INSTALLED_VERSION`
	fi

	if ! git checkout $TAG; then
		echo "ERROR: Failed to check out $TAG in $repo"
		exit 1
	fi

	current_commit=`git rev-parse HEAD`

	if [[ $installed_commit != $current_commit ]]; then
		commit_changed[$repo]=true
	else
		commit_changed[$repo]=false
	fi
done

rebuild_services_needed=false
rebuild_application_needed=false
deploy_ui_needed=false
deploy_services_artifacts_needed=false

if [[ ${commit_changed[application]} == true ]]; then
	rebuild_application_needed=true

	# Some app layer changes require redeploying services artifacts. Since it's hard to detect when it's
	# needed, just always deploy services artifacts whenever the app layer has changed.

	deploy_services_artifacts_needed=true
fi

if [[ ${commit_changed[services]} == true ]]; then
	# See if we need to do a full rebuild, or if redeploying the ui project is sufficient.

	deploy_ui_only=false

	if [[ ! -z $INSTALLED_VERSION ]]; then
		cd $SOURCE_DIR/services

		non_ui_files_changed_count=`git diff --name-only $INSTALLED_VERSION $TAG | egrep -v '^build.properties|^cspace-ui-ucb/*' | wc -l`

		if (( non_ui_files_changed_count == 0 )); then
			# Check if any non-ui properties changed in build.properties.

			non_ui_properties_changed_count=`git diff -U0 $INSTALLED_VERSION $TAG -- build.properties | egrep '^[+-][a-z]' | egrep -v '^[+-]((ucb\.release=)|(cspace\.ui\.))' | wc -l`

			if (( non_ui_properties_changed_count == 0 )); then
				deploy_ui_only=true
			fi
		fi
	fi

	if [[ $deploy_ui_only == true ]]; then
		deploy_ui_needed=true
	else
		rebuild_services_needed=true

		# Some services layer changes require rebuilding the app layer, since
		# the app layer has dependencies on certain modules in the services layer.
		# It's hard to detect this, so just always rebuild the app layer
		# whenever the services layer needs to be rebuilt.

		rebuild_application_needed=true
	fi
fi

# Build and deploy.

# First build the services layer, if necessary.

if [[ $rebuild_services_needed == true ]]; then
	echo "Building services..."

	cd $SOURCE_DIR/services

	if ! mvn clean install -DskipTests; then
		echo "ERROR: Failed to build services"
		exit 1
	fi
else
	echo "Build not needed in services"
fi

# Build/deploy the application layer, if necessary. Tomcat should be stopped.

if [[ $rebuild_application_needed == true ]]; then
	echo "Building application..."

	if ! $CSDOWN; then
		echo "ERROR: Failed to stop CollectionSpace"
		exit 1
	fi

	cd $SOURCE_DIR/application

	if ! mvn clean install -DskipTests; then
		echo "ERROR: Failed to build application"
		exit 1
	fi

	# Remove the war. This is temporary, until we re-disable the deploy of the application layer.
	# It's just helpful for testing during the upgrade.

	rm $TOMCAT_DIR/webapps/collectionspace.war
else
	echo "Build not needed in application"
fi

# Deploy the services layer, if necessary. Tomcat should be stopped.

if [[ $rebuild_services_needed == true ]]; then
	cd $SOURCE_DIR/services

	echo "Deploying services..."

	if ! $CSDOWN; then
		echo "ERROR: Failed to stop CollectionSpace"
		exit 1
	fi

	if ! ant undeploy deploy; then
		echo "ERROR: Failed to deploy services"
		exit 1
	fi

	rm -r /tmp/cspace-bindings-*
	rm -r /tmp/merged-app-config-*

	if [[ -z $INSTALLED_VERSION ]]; then
		# Import permissions on the initial install.

		echo "Importing permissions..."

		if ! ant import; then
			echo "ERROR: Failed to import permissions"
			exit 1
		fi
	fi

	# A full deploy of the services layer deploys the ui and services artifacts,
	# so set these to false.

	deploy_ui_needed=false
	deploy_services_artifacts_needed=false
fi

if [[ $deploy_ui_needed == true ]]; then
	cd $SOURCE_DIR/services/cspace-ui-ucb

	echo "Deploying ui..."

	if ! ant deploy; then
		echo "ERROR: Failed to deploy ui"
		exit 1
	fi
fi

if [[ $deploy_services_artifacts_needed == true ]]; then
	echo "Deploying services artifacts..."

	cd $SOURCE_DIR/services/services/JaxRsServiceProvider

	if ! ant deploy_services_artifacts; then
		echo "ERROR: Failed to deploy services artifacts"
		exit 1
	fi

	rm -r /tmp/cspace-bindings-*
	rm -r /tmp/merged-app-config-*
fi

# Deploy reports

if ! csdeployreports; then
	echo "ERROR: Failed to deploy reports"
	exit 1
fi

# Ensure selinux context is correct

restorecon -R /var/lib/tomcats/$DEPLOYMENT_NAME

# Start tomcat

if ! csup; then
	echo "ERROR: Failed to start CollectionSpace"
	exit 1
fi

echo "CollectionSpace successfully installed from $TAG"
